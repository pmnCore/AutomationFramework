// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationFinal.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CheckGamesMatching")]
    public partial class CheckGamesMatchingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ScoreMatching.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CheckGamesMatching", "\tAs a site visitor\r\n\tI want to see correct match scores at match results page", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("User visits BBC Home Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check score in score table")]
        [NUnit.Framework.CategoryAttribute("ScoreTable")]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Aberdeen", "St Johnstone", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Heart of Midlothian", "Kilmarnock", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Motherwell", "Celtic", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Rangers", "Hibernian", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Ross County", "Livingston", "2", "0", null)]
        public virtual void CheckScoreInScoreTable(string league, string matchDate, string firstTeamName, string secondTeamName, string expectedFirstTeamScore, string expectedSecondTeamScore, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ScoreTable"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check score in score table", null, @__tags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When(string.Format("User selects a Match by {0}, {1}, {2}, {3}", league, matchDate, firstTeamName, secondTeamName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then(string.Format("Match score in Score Table should be {0} - {1}", expectedFirstTeamScore, expectedSecondTeamScore), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check scores between score table and match page")]
        [NUnit.Framework.CategoryAttribute("MatchPage")]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Aberdeen", "St Johnstone", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Heart of Midlothian", "Kilmarnock", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Motherwell", "Celtic", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Rangers", "Hibernian", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Prem", "Wednesday 5th", "Ross County", "Livingston", null)]
        public virtual void CheckScoresBetweenScoreTableAndMatchPage(string league, string matchDate, string firstTeamName, string secondTeamName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "MatchPage"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check scores between score table and match page", null, @__tags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 23
 testRunner.When(string.Format("User opens a Page of the Match: {0}, {1}, {2}, {3}", league, matchDate, firstTeamName, secondTeamName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("Match score in Match Page should be the same as from Score Table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
